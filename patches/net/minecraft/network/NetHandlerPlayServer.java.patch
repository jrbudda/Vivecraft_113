--- a/net/minecraft/network/NetHandlerPlayServer.java
+++ b/net/minecraft/network/NetHandlerPlayServer.java
@@ -7,6 +7,12 @@
 import com.mojang.brigadier.StringReader;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
+
+import java.io.BufferedReader;
+import java.io.ByteArrayInputStream;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
 import java.util.Collections;
 import java.util.Set;
 import java.util.function.Consumer;
@@ -15,6 +21,7 @@
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.block.BlockCommandBlock;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.CommandSource;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
@@ -131,6 +138,9 @@
 import net.minecraft.world.dimension.DimensionType;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.api.VivePlayer;
 
 public class NetHandlerPlayServer implements INetHandlerPlayServer, ITickable
 {
@@ -281,6 +291,10 @@
         {
             this.disconnect(new TextComponentTranslation("multiplayer.disconnect.idling", new Object[0]));
         }
+        
+        //VIVECRAFT
+        NetworkHelper.sendPosData(player); //has to go somewhere?
+
     }
 
     public void captureCurrentPosition()
@@ -1727,5 +1741,89 @@
      */
     public void processCustomPayload(CPacketCustomPayload packetIn)
     {
+        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.player.getServerWorld());
+        String s = packetIn.channel.getNamespace();
+        String d = packetIn.channel.getPath();
+        
+        // VIVE START - client querying if server is running this mod too      		
+        if (s.equalsIgnoreCase("vivecraft") && d.equalsIgnoreCase("data"))
+        {
+        	int len = packetIn.data.readableBytes();
+        	PacketDiscriminators dis = PacketDiscriminators.values()[packetIn.data.readByte()];
+    		byte[] data = new byte[len-1];
+        	packetIn.data.readBytes(data);
+    		VivePlayer vp = NetworkHelper.vivePlayers.get(this.player.getUniqueID());
+    		if(vp == null && dis != PacketDiscriminators.VERSION) {
+    			//how?
+    			return;
+    		}
+        	switch (dis){
+        	case VERSION:
+            	String ver = Minecraft.getMinecraft().minecriftVerString;
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.VERSION,ver));
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.REQUESTDATA, new byte[]{}));  
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.CLIMBING, new byte[]{1, 0}));
+            	sendPacket(NetworkHelper.getVivecraftServerPacket(PacketDiscriminators.TELEPORT, new byte[]{})); 
+    			vp = new VivePlayer(this.player);
+            	NetworkHelper.vivePlayers.put(this.player.getUniqueID(), vp);
+            	
+            	BufferedReader br = new BufferedReader(
+            			new InputStreamReader(
+            					new DataInputStream(
+            							new ByteArrayInputStream(data))));
+    			
+    			String v;
+				try {
+					v = br.readLine();
+					if(v.contains("NONVR")){
+						this.player.sendMessage(new TextComponentString("NONVR: " + this.player.getDisplayName().getFormattedText()));
+						vp.setVR(false);
+					}
+					else{
+						this.player.sendMessage(new TextComponentString("VR: " + this.player.getDisplayName().getFormattedText()));
+						vp.setVR(true);
+					}  
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}     
+        		break;
+    		case CONTROLLER0DATA:
+    			vp.controller0data = data;
+    			break;
+    		case CONTROLLER1DATA:
+    			vp.controller1data = data;
+    			break;
+    		case DRAW:
+    			vp.draw = data;
+    			break;
+    		case HEADDATA:
+    			vp.hmdData = data;
+    			break;	
+    		case MOVEMODE:
+    			break;
+    		case REQUESTDATA:
+    			//only we can use that word.
+    			break;
+    		case WORLDSCALE:
+            	packetIn.data.resetReaderIndex();
+            	packetIn.data.readByte();
+    			vp.worldScale = packetIn.data.readFloat();
+    			break;
+    		case TELEPORT:
+            	packetIn.data.resetReaderIndex();
+            	packetIn.data.readByte();
+    			float x = packetIn.data.readFloat();
+				float y = packetIn.data.readFloat();
+				float z = packetIn.data.readFloat();
+				this.player.setPositionAndRotation(x, y, z, this.player.rotationYaw, this.player.rotationPitch);
+    			break;
+    		case CLIMBING:
+    			this.player.fallDistance = 0;
+        	default:
+        		break;
+        	}
+        }
+        // VIVE END - vivecraft packets
     }
 }
