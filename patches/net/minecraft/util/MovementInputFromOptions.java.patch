--- a/net/minecraft/util/MovementInputFromOptions.java
+++ b/net/minecraft/util/MovementInputFromOptions.java
@@ -1,68 +1,158 @@
 package net.minecraft.util;
 
+import org.vivecraft.control.VRInputAction;
+import org.vivecraft.gameplay.screenhandlers.KeyboardHandler;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.Vector2;
+import org.vivecraft.utils.jkatvr;
+
 import net.minecraft.client.GameSettings;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.main.Main;
+import net.minecraft.client.settings.KeyBinding;
 
 public class MovementInputFromOptions extends MovementInput
 {
     private final GameSettings gameSettings;
+    private boolean autoSprintActive = false;
 
     public MovementInputFromOptions(GameSettings gameSettingsIn)
     {
         this.gameSettings = gameSettingsIn;
     }
 
-    public void updatePlayerMoveState()
-    {
+	public static float getMovementAxisValue(KeyBinding keyBinding) {
+		VRInputAction action = MCOpenVR.getInputAction(keyBinding);
+		return action.isEnabled() ? Math.abs(action.getAxis1D(false)) : 0;
+	}
+
+	public void updatePlayerMoveState() {
         this.moveStrafe = 0.0F;
         this.moveForward = 0.0F;
+		Minecraft mc = Minecraft.getMinecraft();
 
-        if (this.gameSettings.keyBindForward.isKeyDown())
-        {
+		boolean flag = false;
+		if (mc.climbTracker.isClimbeyClimb() && !mc.player.isInWater() && mc.climbTracker.isGrabbingLadder())
+			flag = true; // movement not allowed while climbing
+
+		if (!flag && (this.gameSettings.keyBindForward.isKeyDown() || MCOpenVR.keyTeleportFallback.isKeyDown())) {
             ++this.moveForward;
             this.forwardKeyDown = true;
-        }
-        else
-        {
+		} else {
             this.forwardKeyDown = false;
         }
 
-        if (this.gameSettings.keyBindBack.isKeyDown())
-        {
+		if (!flag && this.gameSettings.keyBindBack.isKeyDown()) {
             --this.moveForward;
             this.backKeyDown = true;
-        }
-        else
-        {
+		} else {
             this.backKeyDown = false;
         }
 
-        if (this.gameSettings.keyBindLeft.isKeyDown())
-        {
+		if (!flag && this.gameSettings.keyBindLeft.isKeyDown()) {
             ++this.moveStrafe;
             this.leftKeyDown = true;
-        }
-        else
-        {
+		} else {
             this.leftKeyDown = false;
         }
 
-        if (this.gameSettings.keyBindRight.isKeyDown())
-        {
+		if (!flag && this.gameSettings.keyBindRight.isKeyDown()) {
             --this.moveStrafe;
             this.rightKeyDown = true;
-        }
-        else
-        {
-            this.rightKeyDown = false;
-        }
-
-        this.jump = this.gameSettings.keyBindJump.isKeyDown();
-        this.sneak = this.gameSettings.keyBindSneak.isKeyDown();
+		} else {
+			this.rightKeyDown = false;
+		}
+
+		if (!flag && !mc.vrSettings.seated && mc.currentScreen == null && !KeyboardHandler.Showing){
+			boolean set = false;
+			// override everything
+
+			VRInputAction strafeAction = MCOpenVR.getInputAction(MCOpenVR.keyFreeMoveStrafe);
+			VRInputAction rotateAction = MCOpenVR.getInputAction(MCOpenVR.keyFreeMoveRotate);
+			Vector2 strafeAxis = strafeAction.isEnabled() ? strafeAction.getAxis2D(false) : new Vector2();
+			Vector2 rotateAxis = rotateAction.isEnabled() ? rotateAction.getAxis2D(false) : new Vector2();
+
+			if (strafeAxis.getX() != 0 || strafeAxis.getY() != 0) {
+				set = true;
+				this.moveForward = strafeAxis.getY();
+				this.moveStrafe = -strafeAxis.getX();
+			} else if (rotateAxis.getY() != 0) {
+				set = true;
+				this.moveForward = rotateAxis.getY();
+				this.moveStrafe = 0;
+
+				this.moveStrafe -= getMovementAxisValue(this.gameSettings.keyBindRight);
+				this.moveStrafe += getMovementAxisValue(this.gameSettings.keyBindLeft);
+			} else if (mc.vrSettings.analogMovement) {
+				set = true;
+				this.moveForward = 0;
+				this.moveStrafe = 0;
+
+				float forward = getMovementAxisValue(this.gameSettings.keyBindForward);
+				if (forward == 0) forward = getMovementAxisValue(MCOpenVR.keyTeleportFallback);
+
+				this.moveForward += forward;
+				this.moveForward -= getMovementAxisValue(this.gameSettings.keyBindBack);
+				this.moveStrafe -= getMovementAxisValue(this.gameSettings.keyBindRight);
+				this.moveStrafe += getMovementAxisValue(this.gameSettings.keyBindLeft);
+        	}
+
+			if(set) {
+				// just assuming all this below is needed for compatibility.
+				this.forwardKeyDown = this.moveForward > 0;
+				this.backKeyDown = this.moveForward < 0;
+				this.leftKeyDown = this.moveStrafe > 0;
+				this.rightKeyDown = this.moveStrafe < 0;
+				VRInputAction.setKeyBindState(this.gameSettings.keyBindForward, this.forwardKeyDown);
+				VRInputAction.setKeyBindState(this.gameSettings.keyBindBack, this.backKeyDown);
+				VRInputAction.setKeyBindState(this.gameSettings.keyBindLeft, this.leftKeyDown);
+				VRInputAction.setKeyBindState(this.gameSettings.keyBindRight, this.rightKeyDown);
+
+				if (mc.vrSettings.autoSprint) {
+					// Sprint only works for walk forwards obviously
+					if (this.moveForward >= mc.vrSettings.autoSprintThreshold) {
+						mc.player.setSprinting(true);
+						autoSprintActive = true;
+						this.moveForward = 1;
+					} else if (this.moveForward > 0) {
+						// Adjust range so you can still reach full speed while not sprinting
+						this.moveForward = (this.moveForward / mc.vrSettings.autoSprintThreshold) * 1.0f;
+					}
+				}
+			}
+			
+		}
+
+		if (autoSprintActive && this.moveForward < mc.vrSettings.autoSprintThreshold) {
+			mc.player.setSprinting(false);
+			autoSprintActive = false;
+		}
+		
+		boolean ok = mc.currentScreen == null && (mc.vrPlayer.getFreeMove() || mc.vrSettings.simulateFalling) && !flag;
+
+		// VIVECRAFT DO ok.
+		this.jump = this.gameSettings.keyBindJump.isKeyDown() && ok;
+		
+		this.sneak = (mc.sneakTracker.sneakCounter > 0 || mc.sneakTracker.sneakOverride || this.gameSettings.keyBindSneak.isKeyDown())
+				&& mc.currentScreen == null;
 
+		
         if (this.sneak)
         {
             this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
             this.moveForward = (float)((double)this.moveForward * 0.3D);
         }
+
+		// VIVECRAFT ADDITIONS ***
+		VRSettings vr =mc.vrSettings;
+		this.moveForward = this.moveForward * vr.movementSpeedMultiplier;
+		this.moveStrafe = this.moveStrafe * vr.movementSpeedMultiplier;
+
+		if (Main.katvr && !flag) {
+			this.moveStrafe = 0;
+			this.moveForward = jkatvr.getSpeed() * jkatvr.walkDirection() * vr.movementSpeedMultiplier;
+		}
+
     }
 }
