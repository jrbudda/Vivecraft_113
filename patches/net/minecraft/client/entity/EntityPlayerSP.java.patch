--- a/net/minecraft/client/entity/EntityPlayerSP.java
+++ b/net/minecraft/client/entity/EntityPlayerSP.java
@@ -1,10 +1,30 @@
 package net.minecraft.client.entity;
 
 import com.google.common.collect.Lists;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.function.Function;
 import javax.annotation.Nullable;
+
+import net.minecraft.inventory.ClickType;
+import net.minecraft.network.play.client.*;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.logging.log4j.LogManager;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.gameplay.OpenVRPlayer;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.TransactionMutex;
+import org.vivecraft.utils.jkatvr;
+
+import net.minecraft.block.Block;
+import net.minecraft.block.SoundType;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.audio.ElytraSound;
@@ -32,7 +52,9 @@
 import net.minecraft.client.gui.inventory.GuiFurnace;
 import net.minecraft.client.gui.inventory.GuiScreenHorseInventory;
 import net.minecraft.client.gui.inventory.GuiShulkerBox;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.network.NetHandlerPlayClient;
+import net.minecraft.client.particle.Particle;
 import net.minecraft.client.util.RecipeBookClient;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.IJumpingMount;
@@ -42,28 +64,21 @@
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityMinecart;
 import net.minecraft.entity.passive.AbstractHorse;
+import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.init.MobEffects;
 import net.minecraft.init.Particles;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.EntityEquipmentSlot;
 import net.minecraft.inventory.IInventory;
+import net.minecraft.item.EnumAction;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemElytra;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.network.datasync.DataParameter;
-import net.minecraft.network.play.client.CPacketAnimation;
-import net.minecraft.network.play.client.CPacketChatMessage;
-import net.minecraft.network.play.client.CPacketClientStatus;
-import net.minecraft.network.play.client.CPacketCloseWindow;
-import net.minecraft.network.play.client.CPacketEntityAction;
-import net.minecraft.network.play.client.CPacketInput;
-import net.minecraft.network.play.client.CPacketPlayer;
-import net.minecraft.network.play.client.CPacketPlayerAbilities;
-import net.minecraft.network.play.client.CPacketPlayerDigging;
-import net.minecraft.network.play.client.CPacketRecipeInfo;
-import net.minecraft.network.play.client.CPacketVehicleMove;
+import net.minecraft.particles.ItemParticleData;
 import net.minecraft.potion.Potion;
 import net.minecraft.potion.PotionEffect;
 import net.minecraft.stats.StatisticsManager;
@@ -151,6 +166,20 @@
      */
     protected int sprintToggleTimer;
 
+    
+    // VIVE START - teleport movement
+    public int movementTeleportTimer;
+	public boolean initFromServer;
+    // VIVE END - teleport movement
+    /** MINECRIFT **/
+    public float headPitch = 0;
+    public double additionX = 0;
+    public double additionZ = 0;
+    public double additionY = 0;
+    public final float PIOVER180 = (float)Math.PI / 180.0F;
+    /** END MINECRIFT **/
+    
+    
     /** Ticks left before sprinting is disabled. */
     public int sprintingTicksLeft;
     public float renderArmYaw;
@@ -183,12 +212,100 @@
         this.dimension = DimensionType.OVERWORLD;
         this.ambientSoundHandlers.add(new UnderwaterAmbientSoundHandler(this, p_i48190_1_.getSoundHandler()));
     }
-
+    //VIVE
+    public void setItemInUseClient(ItemStack item){
+    	this.activeItemStack = item;
+    }
+
+    public void setItemInUseCountClient(int count){
+    	this.activeItemStackUseCount = count;
+    }
+	
+	HashMap<Pair<Short, Integer>, TransactionMutex> pendingTransactions = new HashMap<>();
+	
+	public boolean windowClickSynced(int windowId, int slotId, int mouseButton, ClickType type, long timeout) {
+		short transactionID = this.openContainer.getNextTransactionID(this.inventory);
+		ItemStack itemstack = this.openContainer.slotClick(slotId, mouseButton, type, this);
+		
+		
+		TransactionMutex mutex = new TransactionMutex();
+		
+		Thread watchdog = new Thread(mc.backgroundThreadGroup,new Runnable() {
+			@Override
+			public void run() {
+				try {
+					Thread.sleep(timeout);
+					
+					synchronized (mutex) {
+						if (mutex.consumed)
+							return;
+						
+						mutex.approved = false;
+						mutex.consumed = true;
+						pendingTransactions.remove(Pair.of(transactionID, windowId));
+						mutex.notifyAll();
+						LogManager.getLogger().warn("Timeout on window operation "+transactionID);
+					}
+				} catch (InterruptedException e) {}
+			}
+		});
+		mutex.watchdog = watchdog;
+		
+		
+		pendingTransactions.put(Pair.of(transactionID, windowId), mutex);
+		try {
+			synchronized (mutex) {
+				this.connection.sendPacket(new CPacketClickWindow(windowId, slotId, mouseButton, type, itemstack, transactionID));
+				watchdog.start();
+				mutex.wait();
+				return mutex.approved;
+			}
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+			return false;
+		}
+	}
+	
+	
+	public void confirmTransaction(short transactionID, int windowId, boolean approved) {
+		TransactionMutex mutex = pendingTransactions.get(Pair.of(transactionID, windowId));
+		if (mutex != null) {
+			synchronized (mutex) {
+				if (mutex.consumed)
+					return; //Avoid race condition with watchdog
+				
+				mutex.watchdog.interrupt();
+				pendingTransactions.remove(Pair.of(transactionID, windowId));
+				mutex.approved = approved;
+				mutex.consumed = true;
+				mutex.notifyAll();
+				
+			}
+		}
+	}
+	
+	//END VIVECRAFT
+    
     /**
      * Called when the entity is attacked.
      */
     public boolean attackEntityFrom(DamageSource source, float amount)
     {
+    	//VIVECRAFT
+    	if(amount > 0){
+    		int dur = 1000;
+    		if(source.isExplosion())dur = 2000;
+    		if(source == DamageSource.CACTUS) dur = 200;
+    		//Vivecraft trigger haptics
+    		MCOpenVR.triggerHapticPulse(0, dur);
+    		MCOpenVR.triggerHapticPulse(1, dur);    	
+    	}
+    	//END VIVECRAFT
+
+    	//Forge
+    	//if(Reflector.forgeExists())
+    	//	Reflector.call(Reflector.ForgeHooks_onLivingAttack, new Object[]{this, source, amount});
+    	//
         return false;
     }
 
@@ -199,6 +316,8 @@
     {
     }
 
+    private boolean snapReq = false;
+    
     public boolean startRiding(Entity entityIn, boolean force)
     {
         if (!super.startRiding(entityIn, force))
@@ -219,10 +338,16 @@
                 this.setRotationYawHead(entityIn.rotationYaw);
             }
 
+            //Vivecraft
+            this.mc.vehicleTracker.onStartRiding(entityIn, this);
+    		snapReq = true;
+    		//
             return true;
         }
     }
 
+	public boolean teleported;
+
     /**
      * Dismounts this entity from the entity it is riding.
      */
@@ -230,6 +355,11 @@
     {
         super.stopRiding();
         this.rowingBoat = false;
+        
+        //Vivecraft
+        this.mc.vehicleTracker.onStopRiding(this);
+		//
+
     }
 
     /**
@@ -329,6 +459,18 @@
             boolean flag2 = d0 * d0 + d1 * d1 + d2 * d2 > 9.0E-4D || this.positionUpdateTicks >= 20;
             boolean flag3 = d3 != 0.0D || d4 != 0.0D;
 
+            if(teleported){
+            	teleported = false;
+            	flag2 = true;
+            	ByteBuf payload = Unpooled.buffer();
+            	payload.writeFloat((float) this.posX);
+            	payload.writeFloat((float) this.posY);
+            	payload.writeFloat((float) this.posZ);
+            	byte[] out = new byte[payload.readableBytes()];
+            	payload.readBytes(out);
+            	CPacketCustomPayload pack = NetworkHelper.getVivecraftClientPacket(PacketDiscriminators.TELEPORT,out);
+            	this.connection.sendPacket(pack);
+            } else{
             if (this.isPassenger())
             {
                 this.connection.sendPacket(new CPacketPlayer.PositionRotation(this.motionX, -999.0D, this.motionZ, this.rotationYaw, this.rotationPitch, this.onGround));
@@ -350,6 +492,7 @@
             {
                 this.connection.sendPacket(new CPacketPlayer(this.onGround));
             }
+            }
 
             if (flag2)
             {
@@ -366,6 +509,13 @@
             }
 
             this.prevOnGround = this.onGround;
+            
+            //VIVECRAFT
+            mc.swingTracker.IAmLookingAtMyHand[0] = mc.swingTracker.shouldIlookatMyHand[0];
+            mc.swingTracker.IAmLookingAtMyHand[1] = mc.swingTracker.shouldIlookatMyHand[1];
+            if(mc.vrSettings.walkUpBlocks) mc.gameSettings.autoJump = false;
+            //END VIVECRAFT
+            
             this.autoJumpEnabled = this.mc.gameSettings.autoJump;
         }
     }
@@ -791,6 +941,15 @@
      */
     public void displayGUIChest(IInventory chestInventory)
     {
+		//VIVECRAFT START
+		if (mc.physicalGuiManager.isIntercepting()) {
+			mc.physicalGuiManager.handleWindow(chestInventory);
+			return;
+		} else if (mc.physicalGuiManager.activeGui != null) {
+			return;
+		}
+		//VIVECRAFT END
+		
         String s = chestInventory instanceof IInteractionObject ? ((IInteractionObject)chestInventory).getGuiID() : "minecraft:container";
 
         if ("minecraft:chest".equals(s))
@@ -832,11 +991,27 @@
 
     public void openHorseInventory(AbstractHorse horse, IInventory inventoryIn)
     {
+		//VIVECRAFT START
+		if (mc.physicalGuiManager.isIntercepting()) {
+			mc.physicalGuiManager.handleWindow(inventoryIn);
+			return;
+		} else if (mc.physicalGuiManager.activeGui != null) {
+			return;
+		}
+		//VIVECRAFT END
         this.mc.displayGuiScreen(new GuiScreenHorseInventory(this.inventory, inventoryIn, horse));
     }
 
     public void displayGui(IInteractionObject guiOwner)
     {
+		//VIVECRAFT START
+		if (mc.physicalGuiManager.isIntercepting()) {
+			mc.physicalGuiManager.handleWindow(guiOwner);
+			return;
+		} else if (mc.physicalGuiManager.activeGui != null) {
+			return;
+		}
+		//VIVECRAFT END
         String s = guiOwner.getGuiID();
 
         if ("minecraft:crafting_table".equals(s))
@@ -855,6 +1030,14 @@
 
     public void displayVillagerTradeGui(IMerchant villager)
     {
+		//VIVECRAFT START
+		if (mc.physicalGuiManager.isIntercepting()) {
+			mc.physicalGuiManager.handleWindow(villager);
+			return;
+		} else if (mc.physicalGuiManager.activeGui != null) {
+			return;
+		}
+		//VIVECRAFT END
         this.mc.displayGuiScreen(new GuiMerchant(this.inventory, villager, this.world));
     }
 
@@ -974,6 +1157,9 @@
         float f = 0.8F;
         boolean flag2 = this.movementInput.moveForward >= 0.8F;
         this.movementInput.updatePlayerMoveState();
+        //if (Reflector.forgeExists())
+       // 	Reflector.callVoid(Reflector.ForgeHooksClient_onInputUpdate, this, this.movementInput);
+        this.mc.vrPlayer.doLookOverride(mc.vrPlayer.vrdata_world_pre);
         this.mc.getTutorial().handleMovement(this.movementInput);
 
         if (this.isHandActive() && !this.isPassenger())
@@ -1147,6 +1333,9 @@
         }
 
         super.livingTick();
+        // VIVE START - teleport movement
+        mc.vrPlayer.tick(this, this.mc, this.rand);
+        // VIVE END - teleport movement
 
         if (this.onGround && this.capabilities.isFlying && !this.mc.playerController.isSpectatorMode())
         {
@@ -1198,10 +1387,48 @@
      */
     public void move(MoverType type, double x, double y, double z)
     {
-        double d0 = this.posX;
-        double d1 = this.posZ;
-        super.move(type, x, y, z);
-        this.updateAutoJump((float)(this.posX - d0), (float)(this.posZ - d1));
+    	if(x==0 && y==0 && z==0) return;
+    	if(this.isPassenger())return;
+    	boolean freemove = OpenVRPlayer.get().getFreeMove();
+    	boolean doY = freemove || (Minecraft.getMinecraft().vrSettings.simulateFalling && !this.isOnLadder()) && !this.isSneaking();
+    	if(mc.climbTracker.isActive(this) && (freemove || mc.climbTracker.isGrabbingLadder())) doY = true;
+    	Vec3d roomOrigin = OpenVRPlayer.get().roomOrigin;
+    	//   	Vec3 camloc = Minecraft.getMinecraft().vrPlayer.getHMDPos_World();
+
+    	if ( (mc.climbTracker.isGrabbingLadder() || freemove || mc.swimTracker.isActive(this)) && 
+    			(this.moveForward != 0 || this.isElytraFlying() || Math.abs(this.motionX) > 0.01 || Math.abs(this.motionZ) > 0.01))
+    	{
+    		double ox = roomOrigin.x - posX;
+    		double oz = roomOrigin.z - posZ;
+    		double d0 = this.posX;
+    		double d1 = this.posZ;
+    		super.move(type, x, y, z);
+
+    		if(mc.vrSettings.walkUpBlocks)
+    			this.stepHeight = 1.0f;
+    		else {
+    			this.stepHeight = 0.6f;
+    			this.updateAutoJump((float)(this.posX - d0), (float)(this.posZ - d1));
+    		}
+
+    		double oy = this.posY;
+    		OpenVRPlayer.get().setRoomOrigin(
+    				posX + ox, 
+    				oy, 
+    				posZ  + oz, false);
+    	} else {
+    		if(doY) {      	 
+    			super.move(type,0,y,0);
+    			OpenVRPlayer.get().setRoomOrigin(
+    					OpenVRPlayer.get().roomOrigin.x, 
+    					this.posY,
+    					OpenVRPlayer.get().roomOrigin.z, false);
+
+    		} else {
+    			this.onGround = true; //
+    			//do not move player, VRPlayer.moveplayerinroom will move him around.
+    		}
+    	}
     }
 
     public boolean isAutoJumpEnabled()
@@ -1227,12 +1454,17 @@
                     float f = this.getAIMoveSpeed();
                     float f1 = (float)vec3d2.lengthSquared();
 
+                    //VIVE
+                    float yaw = Minecraft.getMinecraft().vrPlayer.vrdata_world_pre.getBodyYaw();
+               
+                    
                     if (f1 <= 0.001F)
                     {
                         float f2 = f * vec2f.x;
                         float f3 = f * vec2f.y;
-                        float f4 = MathHelper.sin(this.rotationYaw * 0.017453292F);
-                        float f5 = MathHelper.cos(this.rotationYaw * 0.017453292F);
+                        float f4 = MathHelper.sin(yaw * 0.017453292F);
+                        float f5 = MathHelper.cos(yaw * 0.017453292F);
+                        //END VIVE
                         vec3d2 = new Vec3d((double)(f2 * f5 - f3 * f4), vec3d2.y, (double)(f3 * f5 + f2 * f4));
                         f1 = (float)vec3d2.lengthSquared();
 
@@ -1406,4 +1638,371 @@
             return this.eyesInWaterPlayer;
         }
     }
+// VIVECREAFT ADDITIONS
+    
+    
+    /**
+     * Sets the location and Yaw/Pitch of an entity in the world
+     */
+    @Override
+    public void setLocationAndAngles(double x, double y, double z, float yaw, float pitch)
+   {
+    	super.setLocationAndAngles(x, y, z, yaw, pitch);
+
+    	//Vivecraft - this is for when the server moves the player entity, such as spawning, dimension change
+    	//or dismount.
+    	if(!initFromServer) 
+    		return;
+    	
+    	mc.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+    	//mc.vrSettings.vrWorldRotation = yaw; this was a terrible idea
+    }
+    
+    @Override
+    public void setPositionAndRotation(double x, double y, double z, float yaw, float pitch)
+    {
+        super.setPositionAndRotation(x, y, z, yaw, pitch);
+		
+    	mc.vrPlayer.snapRoomOriginToPlayerEntity(this, false, false);
+    	//mc.vrSettings.vrWorldRotation = yaw;
+
+		if(initFromServer == false){
+			this.setLocationAndAngles(x, y, z, yaw, pitch);
+            initFromServer = true;    
+        }
+    }
+    
+    // VIVE START - update room origin when player entity is moved
+    @Override
+    public void setPosition(double x, double y, double z)
+    { //this is also called when riding to move this around.
+		
+    	double bx = this.posX;
+    	double by = this.posY;
+    	double bz = this.posZ;
+
+    	super.setPosition(x, y, z);
+
+    	double ax = this.posX;
+    	double ay = this.posY;
+    	double az = this.posZ;   	
+
+    		Entity mount = this.getRidingEntity();
+    				
+            if (isPassenger()){          	
+    			Vec3d offset = mc.vehicleTracker.Premount_Pos_Room;
+    			offset = offset.rotateYaw(mc.vrPlayer.vrdata_world_pre.rotation_radians);    			
+    			Entity e= mount;
+    			x = x - offset.x;
+    			y = mc.vehicleTracker.getVehicleFloor(mount, y);
+    			z = z - offset.z;
+    			mc.vrPlayer.setRoomOrigin(x, y, z, false);   		
+            } else {
+        		Vec3d roomOrigin = Minecraft.getMinecraft().vrPlayer.roomOrigin;
+          		OpenVRPlayer.get().setRoomOrigin(
+          				roomOrigin.x + (ax - bx),
+          				roomOrigin.y + (ay - by),
+          				roomOrigin.z + (az - bz),
+          				false
+          				);
+            }
+            
+   // 	} 
+    }
+        
+    
+    /** MINECRIFT **/
+    public void doDrag()
+    {
+
+    	float var3 = 0.91F;
+
+    	if (this.onGround)
+    	{
+    		var3 = this.world.getBlockState(new BlockPos(this.posX, this.getEntityBoundingBox().minY - 1.0D, this.posZ)).getBlock().getSlipperiness() * 0.91F;
+    	}
+
+    	double xFactor = var3;
+    	double zFactor = var3;
+
+    	//VIVECRAFT account for stock drag code we can't change in EntityLivingBase
+    	this.motionX /= xFactor;
+    	this.motionZ /= zFactor;
+    	//
+
+//    	if(!mc.vrSettings.seated && !this.onGround && !this.isElytraFlying() && !this.hasNoGravity() && mc.jumpTracker.isClimbeyJumpEquipped() && mc.vrSettings.realisticJumpEnabled) return; //no drag for jump boots.
+//    	if(mc.climbTracker.isGrabbingLadder()) return; //no drag for climb.
+	
+    	int inertiaFactor = Minecraft.getMinecraft().vrSettings.inertiaFactor;
+    	double addFactor = VRSettings.getInertiaAddFactor(inertiaFactor);
+
+    	double boundedAdditionX = getBoundedAddition(additionX);
+    	double targetLimitX = (var3 * boundedAdditionX) / (1f - var3);
+    	double multiFactorX = targetLimitX / (var3 * (targetLimitX + (boundedAdditionX * addFactor)));
+    	xFactor *= multiFactorX;
+
+    	double boundedAdditionZ = getBoundedAddition(additionZ);
+    	double targetLimitZ = (var3 * boundedAdditionZ) / (1f - var3);
+    	double multiFactorZ = targetLimitZ / (var3 * (targetLimitZ + (boundedAdditionZ * addFactor)));
+    	zFactor *= multiFactorZ;
+
+
+    	this.motionX *= xFactor;
+    	this.motionZ *= zFactor;
+    }
+    
+    public double getBoundedAddition(double orig)
+    {
+        if (orig >= -1.0E-6D && orig <= 1.0E-6D) {
+            return 1.0E-6D;
+        }
+        else {
+            return orig;
+        }
+    }
+           
+    /**
+     * Used in both water and by flying objects
+     */
+    @Override
+    public void moveRelative(float strafe, float up, float forward, float friction)
+    {
+    	//   	super.moveFlying(strafe, forward, friction);;
+
+    	OpenVRPlayer vr = mc.vrPlayer;		
+    	if (!vr.getFreeMove()) {return;}
+
+    	int inertiaFactor = Minecraft.getMinecraft().vrSettings.inertiaFactor;
+    	float speed = strafe * strafe + forward * forward;
+
+    	double mX = 0d;
+    	double mZ = 0d;
+    	double mY = 0d;
+    	double addFactor = 1f;
+
+    	if (speed >= 1.0E-4F || Main.katvr)
+    	{
+    		speed = MathHelper.sqrt(speed);
+
+    		if (speed < 1.0F && !Main.katvr)
+    		{
+    			speed = 1.0F;
+    		}
+
+    		speed = friction / speed;
+    		strafe *= speed;
+    		forward *= speed;
+    		Vec3d directionVec = new Vec3d(strafe, 0,forward);
+    		OpenVRPlayer con = mc.vrPlayer;
+
+    		if(Main.katvr){
+    			jkatvr.query();
+  			
+            	speed =  jkatvr.getSpeed() * jkatvr.walkDirection() * mc.vrSettings.movementSpeedMultiplier;
+             	directionVec = new Vec3d(0, 0,speed);
+    			directionVec=directionVec.rotateYaw(-jkatvr.getYaw()* PIOVER180 + mc.vrPlayer.vrdata_world_pre.rotation_radians);	    		
+
+    			if(this.capabilities.isFlying || this.inWater){
+                	directionVec=directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch()* PIOVER180);				
+    			}else{
+
+    			}
+    		} else if(mc.vrSettings.seated){
+    			int c = 0;
+    			if(mc.vrSettings.seatedUseHMD) c = 1;
+    			directionVec=directionVec.rotateYaw(-con.vrdata_world_pre.getController(c).getYaw() * PIOVER180);	    		
+    		}else{
+    			if(this.capabilities.isFlying || this.inWater){
+    				switch (mc.vrSettings.vrFreeMoveMode){
+    				case VRSettings.FREEMOVE_CONTROLLER:
+    					directionVec = directionVec.rotatePitch(con.vrdata_world_pre.getController(1).getPitch()  * PIOVER180);		   
+    					break;
+    				case VRSettings.FREEMOVE_HMD:
+    					directionVec = directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch() * PIOVER180);				
+    					break;
+    				case VRSettings.FREEMOVE_RUNINPLACE:
+    					//hmd pitch
+    					directionVec = directionVec.rotatePitch(con.vrdata_world_pre.hmd.getPitch()* PIOVER180);	
+    					break;
+    				}
+    			}
+
+    			if(mc.jumpTracker.isjumping()){
+    				directionVec=directionVec.rotateYaw(-con.vrdata_world_pre.hmd.getYaw() * PIOVER180);		
+    			}else{
+    				switch (mc.vrSettings.vrFreeMoveMode){
+    				case VRSettings.FREEMOVE_CONTROLLER:
+    					directionVec = directionVec.rotateYaw(-con.vrdata_world_pre.getController(1).getYaw() * PIOVER180);	
+    					break;
+    				case VRSettings.FREEMOVE_HMD:
+    					directionVec = directionVec.rotateYaw(-con.vrdata_world_pre.hmd.getYaw() * PIOVER180);	
+    					break;
+    				case VRSettings.FREEMOVE_RUNINPLACE:
+    					directionVec = directionVec.rotateYaw((float) (-mc.runTracker.getYaw() * PIOVER180));
+    					directionVec = directionVec.scale(mc.runTracker.getSpeed());
+    					break;
+    				}
+    			}
+    		}
+
+
+    		mX = directionVec.x;
+    		mY = directionVec.y;
+    		mZ = directionVec.z;
+    		
+    		
+    		// Modify acceleration sequence (each tick)
+    		if(!this.capabilities.isFlying && !this.inWater) addFactor = VRSettings.getInertiaAddFactor(inertiaFactor);
+
+    		float yAdd = 1f;
+    		if(this.capabilities.isFlying) yAdd = 5f; //HACK
+
+    		this.motionX = this.motionX + (mX * addFactor);
+    		this.motionZ = this.motionZ + (mZ * addFactor);
+         	this.motionY = this.motionY + (mY * yAdd);
+
+    		this.additionX = mX;
+    		this.additionZ = mZ;
+    	} 
+
+    	//if (this instanceof EntityPlayerSP) {
+    	//    System.out.println(String.format("FLYING: %B, forward: %.4f, strafe: %.4f, pitch: %.4f, yaw: %.4f, mx: %.4f, mz: %.4f, my: %.4f", allowYAdjust, forward, strafe, this.headPitch, this.rotationYaw, mX, mZ, mY));
+    	//}
+
+
+    	if(!this.capabilities.isFlying && !this.inWater) doDrag();       //TODO put back intertia while flying.. doesnt work for some reason. 
+
+    	/** END MINECRIFT **/
+
+    }
+
+    	public float eyeHeightOverride = 0;
+    	public boolean overrideEyeHeight;
+
+    	@Override
+    	public float getEyeHeight(){
+    		if(overrideEyeHeight) return eyeHeightOverride;
+    		return super.getEyeHeight();
+    	}
+
+    	private boolean isThePlayer(){
+    		return this == Minecraft.getMinecraft().player;
+    	}
+
+    	@Override
+    	protected void updateItemUse(ItemStack stack, int eatingParticleCount)
+    	{
+    		if(!isThePlayer()){
+    			super.updateItemUse(stack, eatingParticleCount);;
+    		} else {
+    			if (!stack.isEmpty() && this.isHandActive())
+    			{
+    				if (stack.getUseAction() == EnumAction.DRINK)
+    				{
+    					this.playSound(SoundEvents.ENTITY_GENERIC_DRINK, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+    				}
+
+    				if (stack.getUseAction() == EnumAction.EAT)
+    				{
+    					for (int i = 0; i < eatingParticleCount; ++i)
+    					{
+    						Vec3d vec3d = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+    						vec3d = vec3d.rotatePitch(-this.rotationPitch * 0.017453292F);
+    						vec3d = vec3d.rotateYaw(-this.rotationYaw * 0.017453292F);
+    						double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+    						Vec3d vec3d1 = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+    						vec3d1 = vec3d1.rotatePitch(-this.rotationPitch * 0.017453292F);
+    						vec3d1 = vec3d1.rotateYaw(-this.rotationYaw * 0.017453292F);
+
+    						vec3d1 = vec3d1.add(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
+
+    						//VIVE
+    						EnumHand hand = getActiveHand();
+    						if(hand == EnumHand.MAIN_HAND){
+    							vec3d1 = Minecraft.getMinecraft().vrPlayer.vrdata_world_pre.getController(0).getPosition();                 	
+    						} else {
+    							vec3d1 = Minecraft.getMinecraft().vrPlayer.vrdata_world_pre.getController(1).getPosition();                 	
+    						}
+    						//
+    						
+							this.world.spawnParticle(new ItemParticleData(Particles.ITEM, stack), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
+
+    					}
+
+    					this.playSound(SoundEvents.ENTITY_GENERIC_EAT, 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+    				}
+    			}
+    		}
+    	}
+
+    	public boolean isClimbeyJumpEquipped(){
+
+    		if(this.getItemStackFromSlot(EntityEquipmentSlot.FEET) != null){
+    			if(mc.jumpTracker.isBoots(this.getItemStackFromSlot(EntityEquipmentSlot.FEET))) 
+    				return true;
+    		}
+
+    		return false;
+
+    	}
+
+    	public boolean isClimbeyClimbEquipped(){
+
+    		if(this.getHeldItemMainhand() != null){
+    			if(mc.climbTracker.isClaws(this.getHeldItemMainhand())) 
+    				return true;
+    		}
+
+    		if(this.getHeldItemOffhand() != null){
+    			if(mc.climbTracker.isClaws(this.getHeldItemOffhand())) 
+    				return true;
+    		}
+
+    		return false;
+    	}
+    	
+        /**
+         * Called when the mob's health reaches 0.
+         */
+        @Override
+        public void onDeath(DamageSource p_70645_1_){
+        	
+        	super.onDeath(p_70645_1_);
+            MCOpenVR.triggerHapticPulse(0, 2000);
+            MCOpenVR.triggerHapticPulse(1, 2000);    	
+        	
+        }
+    	
+        public void stepSound(BlockPos blockforNoise, Vec3d soundPos){
+        	Block b = this.world.getBlockState(blockforNoise).getBlock();
+            SoundType soundtype = b.getSoundType();
+
+            if (this.world.getBlockState(blockforNoise.up()).getBlock() == Blocks.SNOW)
+            {
+                soundtype = Blocks.SNOW.getSoundType();
+            }
+            
+            float volume = soundtype.getVolume();
+            float pitch = soundtype.getPitch();
+            SoundEvent soundIn = soundtype.getStepSound();
+
+            if (!this.isSilent() && !b.getDefaultState().getMaterial().isLiquid())
+            {
+                this.world.playSound((EntityPlayer)null, soundPos.x, soundPos.y, soundPos.z, soundIn, this.getSoundCategory(), volume, pitch);
+            }
+        }
+
+	// FORGE
+    public void updateSyncFields(EntityPlayerSP old)
+    {
+        this.lastReportedPosX = old.lastReportedPosX;
+        this.lastReportedPosY = old.lastReportedPosY;
+        this.lastReportedPosZ = old.lastReportedPosZ;
+        this.lastReportedYaw = old.lastReportedYaw;
+        this.lastReportedPitch = old.lastReportedPitch;
+        this.prevOnGround = old.prevOnGround;
+        this.serverSneakState = old.serverSneakState;
+        this.serverSprintState = old.serverSprintState;
+        this.positionUpdateTicks = old.positionUpdateTicks;
+    }
 }
