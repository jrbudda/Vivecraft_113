--- a/net/minecraft/client/shader/Framebuffer.java
+++ b/net/minecraft/client/shader/Framebuffer.java
@@ -1,12 +1,18 @@
 package net.minecraft.client.shader;
 
+import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
+
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL30;
+
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.texture.TextureUtil;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+import net.minecraft.src.Config;
 
 public class Framebuffer
 {
@@ -21,6 +27,14 @@
     public float[] framebufferColor;
     public int framebufferFilter;
 
+    //Vivecraft
+    private static final int NO_TEXTURE_ID = -1;
+	private boolean generatedFramebufferTexture;
+	private boolean genMipMaps;
+	private String name;
+	private boolean useTextureInsteadofRenderBuffer = false;
+	//
+    
     public Framebuffer(int width, int height, boolean useDepthIn)
     {
         this.useDepth = useDepthIn;
@@ -35,7 +49,7 @@
         this.createBindFramebuffer(width, height);
     }
 
-    public void createBindFramebuffer(int width, int height)
+    public void createBindFramebuffer(int width, int height, int textureId)
     {
         if (!OpenGlHelper.isFramebufferEnabled())
         {
@@ -51,7 +65,7 @@
                 this.deleteFramebuffer();
             }
 
-            this.createFramebuffer(width, height);
+            this.createFramebuffer(width, height, textureId);
             OpenGlHelper.glBindFramebuffer(OpenGlHelper.GL_FRAMEBUFFER, 0);
         }
     }
@@ -84,7 +98,7 @@
         }
     }
 
-    public void createFramebuffer(int width, int height)
+    public void createFramebuffer(int width, int height, int textureId)
     {
         this.framebufferWidth = width;
         this.framebufferHeight = height;
@@ -98,11 +112,26 @@
         else
         {
             this.framebufferObject = OpenGlHelper.glGenFramebuffers();
-            this.framebufferTexture = TextureUtil.glGenTextures();
+
+            //Vivecraft allow making framebuffer from provided texture
+            if (textureId == NO_TEXTURE_ID) {
+                // generate texture
+                this.framebufferTexture = TextureUtil.glGenTextures();
+                this.generatedFramebufferTexture = true;
+            }
+            else {
+                // Use supplied texture ID
+                this.framebufferTexture = textureId;
+                this.generatedFramebufferTexture = false;
+            }
+            //
 
             if (this.useDepth)
             {
-                this.depthBuffer = OpenGlHelper.glGenRenderbuffers();
+            	if (this.useTextureInsteadofRenderBuffer)
+            		this.depthBuffer = TextureUtil.glGenTextures();
+            	else
+            		this.depthBuffer = OpenGlHelper.glGenRenderbuffers();
             }
 
             this.setFramebufferFilter(9728);
@@ -113,9 +142,24 @@
 
             if (this.useDepth)
             {
-                OpenGlHelper.glBindRenderbuffer(OpenGlHelper.GL_RENDERBUFFER, this.depthBuffer);
-                OpenGlHelper.glRenderbufferStorage(OpenGlHelper.GL_RENDERBUFFER, 33190, this.framebufferTextureWidth, this.framebufferTextureHeight);
-                OpenGlHelper.glFramebufferRenderbuffer(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_DEPTH_ATTACHMENT, OpenGlHelper.GL_RENDERBUFFER, this.depthBuffer);
+            	if (this.useTextureInsteadofRenderBuffer) {
+            	//Vivecraft TODO: Re-evaluate this block.
+	            	GL11.glBindTexture((int)3553, this.depthBuffer );
+	            	GL11.glTexParameteri((int)3553, (int)10242, (int)10496);
+	            	GL11.glTexParameteri((int)3553, (int)10243, (int)10496);
+	            	GL11.glTexParameteri((int)3553, (int)10241, (int)9728);
+	            	GL11.glTexParameteri((int)3553, (int)10240, (int)9728);
+	            	GL11.glTexParameteri((int)3553, (int)34891, (int)6409);
+	            	GL11.glTexImage2D(GL11.GL_TEXTURE_2D, (int)0, GL30.GL_DEPTH24_STENCIL8, framebufferWidth, framebufferHeight, (int)0, GL30.GL_DEPTH_STENCIL,  GL30.GL_UNSIGNED_INT_24_8, (ByteBuffer)null);
+	            	GL30.glFramebufferTexture2D(GL30.GL_FRAMEBUFFER, GL30.GL_DEPTH_STENCIL_ATTACHMENT, GL11.GL_TEXTURE_2D, depthBuffer, (int)0);
+            	//
+            	} else {
+	                OpenGlHelper.glBindRenderbuffer(OpenGlHelper.GL_RENDERBUFFER, this.depthBuffer);
+	                OpenGlHelper.glRenderbufferStorage(OpenGlHelper.GL_RENDERBUFFER, 33190, this.framebufferTextureWidth, this.framebufferTextureHeight);
+	                OpenGlHelper.glFramebufferRenderbuffer(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_DEPTH_ATTACHMENT, OpenGlHelper.GL_RENDERBUFFER, this.depthBuffer);            
+            	}
+            	
+            Config.checkGlError("Create FBO");	
             }
 
             this.checkFramebufferComplete();
@@ -217,7 +261,7 @@
         this.framebufferRenderExt(width, height, true);
     }
 
-    public void framebufferRenderExt(int width, int height, boolean p_178038_3_)
+    public void framebufferRenderExt(int left, int width, int height, int top, boolean disableBlend)
     {
         if (OpenGlHelper.isFramebufferEnabled())
         {
@@ -230,12 +274,12 @@
             GlStateManager.matrixMode(5888);
             GlStateManager.loadIdentity();
             GlStateManager.translatef(0.0F, 0.0F, -2000.0F);
-            GlStateManager.viewport(0, 0, width, height);
+            GlStateManager.viewport(left, top, width, height);
             GlStateManager.enableTexture2D();
             GlStateManager.disableLighting();
             GlStateManager.disableAlphaTest();
 
-            if (p_178038_3_)
+            if (disableBlend)
             {
                 GlStateManager.disableBlend();
                 GlStateManager.enableColorMaterial();
@@ -276,4 +320,57 @@
         GlStateManager.clear(i);
         this.unbindFramebuffer();
     }
+    //Vivecraft Additions
+    public Framebuffer(String name, int width, int height, boolean useDepth, boolean generateMipMaps)
+    {
+        this(name, width, height, useDepth, generateMipMaps, false, 0,-1, true);
+    }
+    
+    public Framebuffer(String name, int width, int height, boolean useDepth, boolean generateMipMaps, boolean multisample, int multisamplecount, int textureID, boolean textureDepth)
+    {
+    	this.name = name;
+        this.useDepth = useDepth;
+        this.framebufferObject = -1;       
+        this.framebufferTexture = NO_TEXTURE_ID;
+        this.generatedFramebufferTexture = true;
+        this.depthBuffer = -1;
+        this.framebufferColor = new float[4];
+        this.framebufferColor[0] = 1.0F;
+        this.framebufferColor[1] = 1.0F;
+        this.framebufferColor[2] = 1.0F;
+        this.framebufferColor[3] = 0.0F;
+        this.genMipMaps = generateMipMaps;
+        this.useTextureInsteadofRenderBuffer = textureDepth;
+//        this.multiSample = multisample;
+//        if (this.multiSample) {
+//            this.multiSampleCount = multisamplecount;
+//            this.textureType = GL32.GL_TEXTURE_2D_MULTISAMPLE;
+//        }
+
+        this.createBindFramebuffer(width, height, textureID);
+    }
+    public void genMipMaps()
+    {
+        GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);    // TODO: Minecrift - Check GLContext capabilities
+    }
+    public void createBindFramebuffer(int width, int height){
+    	this.createBindFramebuffer(width, height, NO_TEXTURE_ID);
+    }
+    
+    public void framebufferRenderExt(int width, int height, boolean noblend)
+    {
+        this.framebufferRenderExt(0,width, height,0, noblend);
+    }
+    
+    public String toString()
+    {
+        StringBuilder sb = new StringBuilder();
+        sb.append("\n");
+        if (name != null) sb.append("Name:   " + name).append("\n");
+        sb.append("Size:   " + framebufferWidth + " x " + framebufferHeight).append("\n");
+        sb.append("FB ID:  " + framebufferObject).append("\n");
+        sb.append("Tex ID: " + framebufferTexture).append("\n");
+        return sb.toString();
+    }
+    
 }
