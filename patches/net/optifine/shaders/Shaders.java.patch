--- a/net/optifine/shaders/Shaders.java
+++ b/net/optifine/shaders/Shaders.java
@@ -117,6 +117,7 @@
 import org.lwjgl.opengl.GL20;
 import org.lwjgl.opengl.GL30;
 import org.lwjgl.opengl.GLCapabilities;
+import org.vivecraft.render.RenderPass;
 
 public class Shaders
 {
@@ -330,12 +331,12 @@
     static final int MaxShadowColorBuffers = 8;
     static final int MaxShadowDepthBuffers = 2;
     static int usedColorBuffers = 0;
-    static int usedDepthBuffers = 0;
+    public static int usedDepthBuffers = 0;
     static int usedShadowColorBuffers = 0;
     static int usedShadowDepthBuffers = 0;
     static int usedColorAttachs = 0;
     static int usedDrawBuffers = 0;
-    static int dfb = 0;
+    public static int dfb = 0;
     static int sfb = 0;
     private static int[] gbuffersFormat = new int[8];
     public static boolean[] gbuffersClear = new boolean[8];
@@ -499,7 +500,7 @@
     static final FloatBuffer tempMatrixDirectBuffer = nextFloatBuffer(16);
     static final FloatBuffer tempDirectFloatBuffer = nextFloatBuffer(16);
     static final IntBuffer dfbColorTextures = nextIntBuffer(16);
-    static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
+    public static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
     static final IntBuffer sfbColorTextures = nextIntBuffer(8);
     static final IntBuffer sfbDepthTextures = nextIntBuffer(2);
     static final IntBuffer dfbDrawBuffers = nextIntBuffer(8);
@@ -514,6 +515,11 @@
     public static int[] entityData = new int[32];
     public static int entityDataIndex = 0;
 
+    //Vivecraft
+    static float[] sunPositionT = new float[4];
+    static float[] moonPositionT = new float[4];
+    //
+    
     private static ByteBuffer nextByteBuffer(int size)
     {
         ByteBuffer bytebuffer = bigBuffer;
@@ -2239,6 +2245,8 @@
             }
 
             checkGLError("Shaders.init");
+
+            mc.stereoProvider.reinitFrameBuffers("Shaders Initialized");
         }
     }
 
@@ -3390,8 +3398,14 @@
                 setProgramUniform1f(uniform_viewWidth, (float)renderWidth);
                 setProgramUniform1f(uniform_viewHeight, (float)renderHeight);
                 setProgramUniform1f(uniform_near, 0.05F);
-                setProgramUniform1f(uniform_far, (float)(mc.gameSettings.renderDistanceChunks * 16));
-                setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+                setProgramUniform1f(uniform_far, (float)(mc.gameSettings.renderDistanceChunks * 16));             
+                if(Minecraft.getMinecraft().currentPass == RenderPass.THIRD) {
+                    setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+                    setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+                }else {
+                    setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+                    setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+                }
                 setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
                 setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
                 setProgramUniform3f(uniform_upPosition, upPosition[0], upPosition[1], upPosition[2]);
@@ -3759,10 +3773,10 @@
 
     private static void resize()
     {
-        renderDisplayWidth = mc.mainWindow.getFramebufferWidth();
-        renderDisplayHeight = mc.mainWindow.getFramebufferHeight();
-        renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
-        renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
+        renderDisplayWidth = mc.stereoProvider.framebufferVrRender.framebufferWidth;
+        renderDisplayHeight = mc.stereoProvider.framebufferVrRender.framebufferHeight;
+        renderWidth = renderDisplayWidth; //Vivecraft Math.round((float)renderDisplayWidth * configRenderResMul);
+        renderHeight = renderDisplayHeight; //Vivecraft Math.round((float)renderDisplayHeight * configRenderResMul);
         setupFrameBuffer();
     }
 
@@ -3792,6 +3806,7 @@
         GL20.glDrawBuffers(0);
         GL11.glReadBuffer(0);
 
+        // VIVECRAFT: We need stencil buffers here
         for (int i = 0; i < usedDepthBuffers; ++i)
         {
             GlStateManager.bindTexture(dfbDepthTextures.get(i));
@@ -3800,10 +3815,12 @@
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
             GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL14.GL_DEPTH_TEXTURE_MODE, GL11.GL_LUMINANCE);
-            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, renderWidth, renderHeight, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (FloatBuffer)null);
+            //GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, renderWidth, renderHeight, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, (FloatBuffer)null);
+            GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL30.GL_DEPTH24_STENCIL8, renderWidth, renderHeight, 0, GL30.GL_DEPTH_STENCIL, GL30.GL_UNSIGNED_INT_24_8, (FloatBuffer)null);
         }
 
-        EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, dfbDepthTextures.get(0), 0);
+        //EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, dfbDepthTextures.get(0), 0);
+        EXTFramebufferObject.glFramebufferTexture2DEXT(36160, GL30.GL_DEPTH_STENCIL_ATTACHMENT, 3553, dfbDepthTextures.get(0), 0);
         GL20.glDrawBuffers(dfbDrawBuffers);
         GL11.glReadBuffer(0);
         checkGLError("FT d");
@@ -3961,12 +3978,13 @@
                     setShaderPack("OFF");
                     return;
                 }
-            }
+            }          
         }
 
-        if (mc.mainWindow.getFramebufferWidth() != renderDisplayWidth || mc.mainWindow.getFramebufferHeight() != renderDisplayHeight)
+        if (mc.stereoProvider.reinitShadersFlag || mc.stereoProvider.framebufferVrRender.framebufferWidth != renderDisplayWidth || mc.stereoProvider.framebufferVrRender.framebufferHeight != renderDisplayHeight)
         {
             resize();
+            mc.stereoProvider.reinitShadersFlag  =false;
         }
 
         if (needResizeShadow)
@@ -4011,7 +4029,7 @@
 
         if (entity != null)
         {
-            isSleeping = entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPlayerSleeping();
+            isSleeping = false;//NO SLEEPIES  entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPlayerSleeping();
             eyePosY = (float)entity.posY * partialTicks + (float)entity.lastTickPosY * (1.0F - partialTicks);
             eyeBrightness = entity.getBrightnessForRender();
             f1 = (float)diffSystemTime * 0.01F;
@@ -4085,7 +4103,9 @@
         previousModelView.position(0);
         modelView.position(0);
         checkGLError("beginRender");
-        ShadersRender.renderShadowMap(entityRenderer, 0, partialTicks, finishTimeNano);
+		// VIVECRAFT: Render shadow map once per frame instead of every damn pass
+		if (mc.currentPass == RenderPass.LEFT || mc.currentPass == RenderPass.THIRD)
+			ShadersRender.renderShadowMap(entityRenderer, 0, partialTicks, finishTimeNano);
         mc.profiler.endSection();
         EXTFramebufferObject.glBindFramebufferEXT(36160, dfb);
 
@@ -4258,7 +4278,7 @@
         {
             checkGLError("shadow clear pre");
             EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, sfbDepthTextures.get(0), 0);
-            GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
             GL20.glDrawBuffers(ProgramShadow.getDrawBuffers());
             checkFramebufferStatus("shadow clear");
             GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
@@ -4274,7 +4294,7 @@
 
                 if (vector4f != null)
                 {
-                    GL11.glClearColor(vector4f.getX(), vector4f.getY(), vector4f.getZ(), vector4f.getW());
+                	GlStateManager.clearColor(vector4f.getX(), vector4f.getY(), vector4f.getZ(), vector4f.getW());
                 }
 
                 if (dfbColorTexturesFlip.isChanged(0))
@@ -4291,7 +4311,7 @@
 
             if (gbuffersClear[1])
             {
-                GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
+            	GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
                 Vector4f vector4f2 = gbuffersClearColor[1];
 
                 if (vector4f2 != null)
@@ -4499,23 +4519,34 @@
 
     public static void postCelestialRotate()
     {
-        FloatBuffer floatbuffer = tempMatrixDirectBuffer;
-        floatbuffer.clear();
-        GL11.glGetFloatv(2982, floatbuffer);
-        floatbuffer.get(tempMat, 0, 16);
-        SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
-        SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
-        System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
-        setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
-        setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
-        setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
-
-        if (customUniforms != null)
-        {
-            customUniforms.update();
-        }
+    	FloatBuffer floatbuffer = tempMatrixDirectBuffer;
+    	floatbuffer.clear();
+    	GL11.glGetFloatv(2982, floatbuffer);
+    	floatbuffer.get(tempMat, 0, 16);
+    	if(Minecraft.getMinecraft().currentPass == RenderPass.THIRD) {
+    		//Vivecraft
+    		SMath.multiplyMat4xVec4(sunPositionT, tempMat, sunPosModelView);
+    		SMath.multiplyMat4xVec4(moonPositionT, tempMat, moonPosModelView);
+    		System.arraycopy(shadowAngle == sunAngle ? sunPositionT : moonPosition, 0, shadowLightPosition, 0, 3);
+    		setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+    		setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+    		setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+    		//
+    	}
+    	else {
+    		SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
+    		SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
+    		System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
+    		setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+    		setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+    		setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+    	}
+    	if (customUniforms != null)
+    	{
+    		customUniforms.update();
+    	}
 
-        checkGLError("postCelestialRotate");
+    	checkGLError("postCelestialRotate");
     }
 
     public static void setUpPosition()
@@ -4553,7 +4584,7 @@
 
     public static void drawComposite()
     {
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+    	GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
         GL11.glBegin(GL11.GL_QUADS);
         GL11.glTexCoord2f(0.0F, 0.0F);
         GL11.glVertex3f(0.0F, 0.0F, 0.0F);
@@ -4640,7 +4671,7 @@
             GL11.glPushMatrix();
             GL11.glLoadIdentity();
             GL11.glOrtho(0.0D, 1.0D, 0.0D, 1.0D, 0.0D, 1.0D);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableTexture2D();
             GlStateManager.disableAlphaTest();
             GlStateManager.disableBlend();
@@ -4797,11 +4828,11 @@
         isRenderingDfb = false;
         mc.getFramebuffer().bindFramebuffer(true);
         OpenGlHelper.glFramebufferTexture2D(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_COLOR_ATTACHMENT0, 3553, mc.getFramebuffer().framebufferTexture, 0);
-        GL11.glViewport(0, 0, mc.mainWindow.getFramebufferWidth(), mc.mainWindow.getFramebufferHeight());
+        //GL11.glViewport(0, 0, mc.mainWindow.getFramebufferWidth(), mc.mainWindow.getFramebufferHeight());
         GlStateManager.depthMask(true);
-        GL11.glClearColor(clearColorR, clearColorG, clearColorB, 1.0F);
+        GlStateManager.clearColor(clearColorR, clearColorG, clearColorB, 1.0F);
         GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.enableTexture2D();
         GlStateManager.disableAlphaTest();
         GlStateManager.disableBlend();
