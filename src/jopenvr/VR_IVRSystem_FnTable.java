package jopenvr;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import java.util.Arrays;
import java.util.List;
import jopenvr.JOpenVRLibrary.VkInstance_T;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class VR_IVRSystem_FnTable extends Structure {
	public VR_IVRSystem_FnTable.GetRecommendedRenderTargetSize_callback GetRecommendedRenderTargetSize;
	public VR_IVRSystem_FnTable.GetProjectionMatrix_callback GetProjectionMatrix;
	public VR_IVRSystem_FnTable.GetProjectionRaw_callback GetProjectionRaw;
	public VR_IVRSystem_FnTable.ComputeDistortion_callback ComputeDistortion;
	public VR_IVRSystem_FnTable.GetEyeToHeadTransform_callback GetEyeToHeadTransform;
	public VR_IVRSystem_FnTable.GetTimeSinceLastVsync_callback GetTimeSinceLastVsync;
	public VR_IVRSystem_FnTable.GetD3D9AdapterIndex_callback GetD3D9AdapterIndex;
	public jopenvr.VR_IVRExtendedDisplay_FnTable.GetDXGIOutputInfo_callback GetDXGIOutputInfo;
	public VR_IVRSystem_FnTable.GetOutputDevice_callback GetOutputDevice;
	public VR_IVRSystem_FnTable.IsDisplayOnDesktop_callback IsDisplayOnDesktop;
	public VR_IVRSystem_FnTable.SetDisplayVisibility_callback SetDisplayVisibility;
	public VR_IVRSystem_FnTable.GetDeviceToAbsoluteTrackingPose_callback GetDeviceToAbsoluteTrackingPose;
	public VR_IVRSystem_FnTable.ResetSeatedZeroPose_callback ResetSeatedZeroPose;
	public VR_IVRSystem_FnTable.GetSeatedZeroPoseToStandingAbsoluteTrackingPose_callback GetSeatedZeroPoseToStandingAbsoluteTrackingPose;
	public VR_IVRSystem_FnTable.GetRawZeroPoseToStandingAbsoluteTrackingPose_callback GetRawZeroPoseToStandingAbsoluteTrackingPose;
	public VR_IVRSystem_FnTable.GetSortedTrackedDeviceIndicesOfClass_callback GetSortedTrackedDeviceIndicesOfClass;
	public VR_IVRSystem_FnTable.GetTrackedDeviceActivityLevel_callback GetTrackedDeviceActivityLevel;
	public VR_IVRSystem_FnTable.ApplyTransform_callback ApplyTransform;
	public VR_IVRSystem_FnTable.GetTrackedDeviceIndexForControllerRole_callback GetTrackedDeviceIndexForControllerRole;
	public VR_IVRSystem_FnTable.GetControllerRoleForTrackedDeviceIndex_callback GetControllerRoleForTrackedDeviceIndex;
	public VR_IVRSystem_FnTable.GetTrackedDeviceClass_callback GetTrackedDeviceClass;
	public VR_IVRSystem_FnTable.IsTrackedDeviceConnected_callback IsTrackedDeviceConnected;
	public VR_IVRSystem_FnTable.GetBoolTrackedDeviceProperty_callback GetBoolTrackedDeviceProperty;
	public VR_IVRSystem_FnTable.GetFloatTrackedDeviceProperty_callback GetFloatTrackedDeviceProperty;
	public VR_IVRSystem_FnTable.GetInt32TrackedDeviceProperty_callback GetInt32TrackedDeviceProperty;
	public VR_IVRSystem_FnTable.GetUint64TrackedDeviceProperty_callback GetUint64TrackedDeviceProperty;
	public VR_IVRSystem_FnTable.GetMatrix34TrackedDeviceProperty_callback GetMatrix34TrackedDeviceProperty;
	public VR_IVRSystem_FnTable.GetArrayTrackedDeviceProperty_callback GetArrayTrackedDeviceProperty;
	public VR_IVRSystem_FnTable.GetStringTrackedDeviceProperty_callback GetStringTrackedDeviceProperty;
	public VR_IVRSystem_FnTable.GetPropErrorNameFromEnum_callback GetPropErrorNameFromEnum;
	public VR_IVRSystem_FnTable.PollNextEvent_callback PollNextEvent;
	public VR_IVRSystem_FnTable.PollNextEventWithPose_callback PollNextEventWithPose;
	public VR_IVRSystem_FnTable.GetEventTypeNameFromEnum_callback GetEventTypeNameFromEnum;
	public VR_IVRSystem_FnTable.GetHiddenAreaMesh_callback GetHiddenAreaMesh;
	public VR_IVRSystem_FnTable.GetControllerState_callback GetControllerState;
	public VR_IVRSystem_FnTable.GetControllerStateWithPose_callback GetControllerStateWithPose;
	public VR_IVRSystem_FnTable.TriggerHapticPulse_callback TriggerHapticPulse;
	public VR_IVRSystem_FnTable.GetButtonIdNameFromEnum_callback GetButtonIdNameFromEnum;
	public VR_IVRSystem_FnTable.GetControllerAxisTypeNameFromEnum_callback GetControllerAxisTypeNameFromEnum;
	public VR_IVRSystem_FnTable.IsInputAvailable_callback IsInputAvailable;
	public VR_IVRSystem_FnTable.IsSteamVRDrawingControllers_callback IsSteamVRDrawingControllers;
	public VR_IVRSystem_FnTable.ShouldApplicationPause_callback ShouldApplicationPause;
	public VR_IVRSystem_FnTable.ShouldApplicationReduceRenderingWork_callback ShouldApplicationReduceRenderingWork;
	public VR_IVRSystem_FnTable.DriverDebugRequest_callback DriverDebugRequest;
	public VR_IVRSystem_FnTable.PerformFirmwareUpdate_callback PerformFirmwareUpdate;
	public VR_IVRSystem_FnTable.AcknowledgeQuit_Exiting_callback AcknowledgeQuit_Exiting;
	public VR_IVRSystem_FnTable.AcknowledgeQuit_UserPrompt_callback AcknowledgeQuit_UserPrompt;
	public interface GetRecommendedRenderTargetSize_callback extends Callback {
		void apply(IntByReference pnWidth, IntByReference pnHeight);
	};
	public interface GetProjectionMatrix_callback extends Callback {
		jopenvr.HmdMatrix44_t.ByValue apply(int eEye, float fNearZ, float fFarZ);
	};
	public interface GetProjectionRaw_callback extends Callback {
		void apply(int eEye, FloatByReference pfLeft, FloatByReference pfRight, FloatByReference pfTop, FloatByReference pfBottom);
	};
	public interface ComputeDistortion_callback extends Callback {
		byte apply(int eEye, float fU, float fV, DistortionCoordinates_t pDistortionCoordinates);
	};
	public interface GetEyeToHeadTransform_callback extends Callback {
		HmdMatrix34_t.ByValue apply(int eEye);
	};
	public interface GetTimeSinceLastVsync_callback extends Callback {
		byte apply(FloatByReference pfSecondsSinceLastVsync, LongByReference pulFrameCounter);
	};
	public interface GetD3D9AdapterIndex_callback extends Callback {
		int apply();
	};
	public interface GetDXGIOutputInfo_callback extends Callback {
		void apply(IntByReference pnAdapterIndex);
	};
	public interface GetOutputDevice_callback extends Callback {
		void apply(LongByReference pnDevice, int textureType, VkInstance_T pInstance);
	};
	public interface IsDisplayOnDesktop_callback extends Callback {
		byte apply();
	};
	public interface SetDisplayVisibility_callback extends Callback {
		byte apply(byte bIsVisibleOnDesktop);
	};
	public interface GetDeviceToAbsoluteTrackingPose_callback extends Callback {
		void apply(int eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t pTrackedDevicePoseArray, int unTrackedDevicePoseArrayCount);
	};
	public interface ResetSeatedZeroPose_callback extends Callback {
		void apply();
	};
	public interface GetSeatedZeroPoseToStandingAbsoluteTrackingPose_callback extends Callback {
		HmdMatrix34_t.ByValue apply();
	};
	public interface GetRawZeroPoseToStandingAbsoluteTrackingPose_callback extends Callback {
		HmdMatrix34_t.ByValue apply();
	};
	public interface GetSortedTrackedDeviceIndicesOfClass_callback extends Callback {
		int apply(int eTrackedDeviceClass, IntByReference punTrackedDeviceIndexArray, int unTrackedDeviceIndexArrayCount, int unRelativeToTrackedDeviceIndex);
	};
	public interface GetTrackedDeviceActivityLevel_callback extends Callback {
		int apply(int unDeviceId);
	};
	public interface ApplyTransform_callback extends Callback {
		void apply(TrackedDevicePose_t pOutputPose, TrackedDevicePose_t pTrackedDevicePose, HmdMatrix34_t pTransform);
	};
	public interface GetTrackedDeviceIndexForControllerRole_callback extends Callback {
		int apply(int unDeviceType);
	};
	public interface GetControllerRoleForTrackedDeviceIndex_callback extends Callback {
		int apply(int unDeviceIndex);
	};
	public interface GetTrackedDeviceClass_callback extends Callback {
		int apply(int unDeviceIndex);
	};
	public interface IsTrackedDeviceConnected_callback extends Callback {
		byte apply(int unDeviceIndex);
	};
	public interface GetBoolTrackedDeviceProperty_callback extends Callback {
		byte apply(int unDeviceIndex, int prop, IntByReference pError);
	};
	public interface GetFloatTrackedDeviceProperty_callback extends Callback {
		float apply(int unDeviceIndex, int prop, IntByReference pError);
	};
	public interface GetInt32TrackedDeviceProperty_callback extends Callback {
		int apply(int unDeviceIndex, int prop, IntByReference pError);
	};
	public interface GetUint64TrackedDeviceProperty_callback extends Callback {
		long apply(int unDeviceIndex, int prop, IntByReference pError);
	};
	public interface GetMatrix34TrackedDeviceProperty_callback extends Callback {
		HmdMatrix34_t.ByValue apply(int unDeviceIndex, int prop, IntByReference pError);
	};
	public interface GetArrayTrackedDeviceProperty_callback extends Callback {
		int apply(int unDeviceIndex, int prop, int propType, Pointer pBuffer, int unBufferSize, IntByReference pError);
	};
	public interface GetStringTrackedDeviceProperty_callback extends Callback {
		int apply(int unDeviceIndex, int prop, Pointer pchValue, int unBufferSize, IntByReference pError);
	};
	public interface GetPropErrorNameFromEnum_callback extends Callback {
		Pointer apply(int error);
	};
	public interface PollNextEvent_callback extends Callback {
		byte apply(VREvent_t pEvent, int uncbVREvent);
	};
	public interface PollNextEventWithPose_callback extends Callback {
		byte apply(int eOrigin, VREvent_t pEvent, int uncbVREvent, TrackedDevicePose_t pTrackedDevicePose);
	};
	public interface GetEventTypeNameFromEnum_callback extends Callback {
		Pointer apply(int eType);
	};
	public interface GetHiddenAreaMesh_callback extends Callback {
		jopenvr.HiddenAreaMesh_t.ByValue apply(int eEye, int type);
	};
	public interface GetControllerState_callback extends Callback {
		byte apply(int unControllerDeviceIndex, VRControllerState_t pControllerState, int unControllerStateSize);
	};
	public interface GetControllerStateWithPose_callback extends Callback {
		byte apply(int eOrigin, int unControllerDeviceIndex, VRControllerState_t pControllerState, int unControllerStateSize, TrackedDevicePose_t pTrackedDevicePose);
	};
	public interface TriggerHapticPulse_callback extends Callback {
		void apply(int unControllerDeviceIndex, int unAxisId, short usDurationMicroSec);
	};
	public interface GetButtonIdNameFromEnum_callback extends Callback {
		Pointer apply(int eButtonId);
	};
	public interface GetControllerAxisTypeNameFromEnum_callback extends Callback {
		Pointer apply(int eAxisType);
	};
	public interface IsInputAvailable_callback extends Callback {
		byte apply();
	};
	public interface IsSteamVRDrawingControllers_callback extends Callback {
		byte apply();
	};
	public interface ShouldApplicationPause_callback extends Callback {
		byte apply();
	};
	public interface ShouldApplicationReduceRenderingWork_callback extends Callback {
		byte apply();
	};
	public interface DriverDebugRequest_callback extends Callback {
		int apply(int unDeviceIndex, Pointer pchRequest, Pointer pchResponseBuffer, int unResponseBufferSize);
	};
	public interface PerformFirmwareUpdate_callback extends Callback {
		int apply(int unDeviceIndex);
	};
	public interface AcknowledgeQuit_Exiting_callback extends Callback {
		void apply();
	};
	public interface AcknowledgeQuit_UserPrompt_callback extends Callback {
		void apply();
	};
	public VR_IVRSystem_FnTable() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("GetRecommendedRenderTargetSize", "GetProjectionMatrix", "GetProjectionRaw", "ComputeDistortion", "GetEyeToHeadTransform", "GetTimeSinceLastVsync", "GetD3D9AdapterIndex", "GetDXGIOutputInfo", "GetOutputDevice", "IsDisplayOnDesktop", "SetDisplayVisibility", "GetDeviceToAbsoluteTrackingPose", "ResetSeatedZeroPose", "GetSeatedZeroPoseToStandingAbsoluteTrackingPose", "GetRawZeroPoseToStandingAbsoluteTrackingPose", "GetSortedTrackedDeviceIndicesOfClass", "GetTrackedDeviceActivityLevel", "ApplyTransform", "GetTrackedDeviceIndexForControllerRole", "GetControllerRoleForTrackedDeviceIndex", "GetTrackedDeviceClass", "IsTrackedDeviceConnected", "GetBoolTrackedDeviceProperty", "GetFloatTrackedDeviceProperty", "GetInt32TrackedDeviceProperty", "GetUint64TrackedDeviceProperty", "GetMatrix34TrackedDeviceProperty", "GetArrayTrackedDeviceProperty", "GetStringTrackedDeviceProperty", "GetPropErrorNameFromEnum", "PollNextEvent", "PollNextEventWithPose", "GetEventTypeNameFromEnum", "GetHiddenAreaMesh", "GetControllerState", "GetControllerStateWithPose", "TriggerHapticPulse", "GetButtonIdNameFromEnum", "GetControllerAxisTypeNameFromEnum", "IsInputAvailable", "IsSteamVRDrawingControllers", "ShouldApplicationPause", "ShouldApplicationReduceRenderingWork", "DriverDebugRequest", "PerformFirmwareUpdate", "AcknowledgeQuit_Exiting", "AcknowledgeQuit_UserPrompt");
	}
	public VR_IVRSystem_FnTable(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends VR_IVRSystem_FnTable implements Structure.ByReference {
		
	};
	public static class ByValue extends VR_IVRSystem_FnTable implements Structure.ByValue {
		
	};
}
