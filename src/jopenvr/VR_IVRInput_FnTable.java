package jopenvr;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class VR_IVRInput_FnTable extends Structure {
	public VR_IVRInput_FnTable.SetActionManifestPath_callback SetActionManifestPath;
	public VR_IVRInput_FnTable.GetActionSetHandle_callback GetActionSetHandle;
	public VR_IVRInput_FnTable.GetActionHandle_callback GetActionHandle;
	public VR_IVRInput_FnTable.GetInputSourceHandle_callback GetInputSourceHandle;
	public VR_IVRInput_FnTable.UpdateActionState_callback UpdateActionState;
	public VR_IVRInput_FnTable.GetDigitalActionData_callback GetDigitalActionData;
	public VR_IVRInput_FnTable.GetAnalogActionData_callback GetAnalogActionData;
	public VR_IVRInput_FnTable.GetPoseActionDataRelativeToNow_callback GetPoseActionDataRelativeToNow;
	public VR_IVRInput_FnTable.GetPoseActionDataForNextFrame_callback GetPoseActionDataForNextFrame;
	public VR_IVRInput_FnTable.GetSkeletalActionData_callback GetSkeletalActionData;
	public VR_IVRInput_FnTable.GetBoneCount_callback GetBoneCount;
	public VR_IVRInput_FnTable.GetBoneHierarchy_callback GetBoneHierarchy;
	public VR_IVRInput_FnTable.GetBoneName_callback GetBoneName;
	public VR_IVRInput_FnTable.GetSkeletalReferenceTransforms_callback GetSkeletalReferenceTransforms;
	public VR_IVRInput_FnTable.GetSkeletalTrackingLevel_callback GetSkeletalTrackingLevel;
	public VR_IVRInput_FnTable.GetSkeletalBoneData_callback GetSkeletalBoneData;
	public VR_IVRInput_FnTable.GetSkeletalSummaryData_callback GetSkeletalSummaryData;
	public VR_IVRInput_FnTable.GetSkeletalBoneDataCompressed_callback GetSkeletalBoneDataCompressed;
	public VR_IVRInput_FnTable.DecompressSkeletalBoneData_callback DecompressSkeletalBoneData;
	public VR_IVRInput_FnTable.TriggerHapticVibrationAction_callback TriggerHapticVibrationAction;
	public VR_IVRInput_FnTable.GetActionOrigins_callback GetActionOrigins;
	public VR_IVRInput_FnTable.GetOriginLocalizedName_callback GetOriginLocalizedName;
	public VR_IVRInput_FnTable.GetOriginTrackedDeviceInfo_callback GetOriginTrackedDeviceInfo;
	public VR_IVRInput_FnTable.ShowActionOrigins_callback ShowActionOrigins;
	public VR_IVRInput_FnTable.ShowBindingsForActionSet_callback ShowBindingsForActionSet;
	public VR_IVRInput_FnTable.IsUsingLegacyInput_callback IsUsingLegacyInput;
	public interface SetActionManifestPath_callback extends Callback {
		int apply(Pointer pchActionManifestPath);
	};
	public interface GetActionSetHandle_callback extends Callback {
		int apply(Pointer pchActionSetName, LongByReference pHandle);
	};
	public interface GetActionHandle_callback extends Callback {
		int apply(Pointer pchActionName, LongByReference pHandle);
	};
	public interface GetInputSourceHandle_callback extends Callback {
		int apply(Pointer pchInputSourcePath, LongByReference pHandle);
	};
	public interface UpdateActionState_callback extends Callback {
		int apply(VRActiveActionSet_t pSets, int unSizeOfVRSelectedActionSet_t, int unSetCount);
	};
	public interface GetDigitalActionData_callback extends Callback {
		int apply(long action, InputDigitalActionData_t pActionData, int unActionDataSize, long ulRestrictToDevice);
	};
	public interface GetAnalogActionData_callback extends Callback {
		int apply(long action, InputAnalogActionData_t pActionData, int unActionDataSize, long ulRestrictToDevice);
	};
	public interface GetPoseActionDataRelativeToNow_callback extends Callback {
		int apply(long action, int eOrigin, float fPredictedSecondsFromNow, InputPoseActionData_t pActionData, int unActionDataSize, long ulRestrictToDevice);
	};
	public interface GetPoseActionDataForNextFrame_callback extends Callback {
		int apply(long action, int eOrigin, InputPoseActionData_t pActionData, int unActionDataSize, long ulRestrictToDevice);
	};
	public interface GetSkeletalActionData_callback extends Callback {
		int apply(long action, InputSkeletalActionData_t pActionData, int unActionDataSize);
	};
	public interface GetBoneCount_callback extends Callback {
		int apply(long action, IntByReference pBoneCount);
	};
	public interface GetBoneHierarchy_callback extends Callback {
		int apply(long action, IntByReference pParentIndices, int unIndexArayCount);
	};
	public interface GetBoneName_callback extends Callback {
		int apply(long action, int nBoneIndex, Pointer pchBoneName, int unNameBufferSize);
	};
	public interface GetSkeletalReferenceTransforms_callback extends Callback {
		int apply(long action, int eTransformSpace, int eReferencePose, VRBoneTransform_t pTransformArray, int unTransformArrayCount);
	};
	public interface GetSkeletalTrackingLevel_callback extends Callback {
		int apply(long action, IntByReference pSkeletalTrackingLevel);
	};
	public interface GetSkeletalBoneData_callback extends Callback {
		int apply(long action, int eTransformSpace, int eMotionRange, VRBoneTransform_t pTransformArray, int unTransformArrayCount);
	};
	public interface GetSkeletalSummaryData_callback extends Callback {
		int apply(long action, int eSummaryType, VRSkeletalSummaryData_t pSkeletalSummaryData);
	};
	public interface GetSkeletalBoneDataCompressed_callback extends Callback {
		int apply(long action, int eMotionRange, Pointer pvCompressedData, int unCompressedSize, IntByReference punRequiredCompressedSize);
	};
	public interface DecompressSkeletalBoneData_callback extends Callback {
		int apply(Pointer pvCompressedBuffer, int unCompressedBufferSize, int eTransformSpace, VRBoneTransform_t pTransformArray, int unTransformArrayCount);
	};
	public interface TriggerHapticVibrationAction_callback extends Callback {
		int apply(long action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, long ulRestrictToDevice);
	};
	public interface GetActionOrigins_callback extends Callback {
		int apply(long actionSetHandle, long digitalActionHandle, LongByReference originsOut, int originOutCount);
	};
	public interface GetOriginLocalizedName_callback extends Callback {
		int apply(long origin, Pointer pchNameArray, int unNameArraySize, int unStringSectionsToInclude);
	};
	public interface GetOriginTrackedDeviceInfo_callback extends Callback {
		int apply(long origin, InputOriginInfo_t pOriginInfo, int unOriginInfoSize);
	};
	public interface ShowActionOrigins_callback extends Callback {
		int apply(long actionSetHandle, long ulActionHandle);
	};
	public interface ShowBindingsForActionSet_callback extends Callback {
		int apply(VRActiveActionSet_t pSets, int unSizeOfVRSelectedActionSet_t, int unSetCount, long originToHighlight);
	};
	public interface IsUsingLegacyInput_callback extends Callback {
		byte apply();
	};
	public VR_IVRInput_FnTable() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("SetActionManifestPath", "GetActionSetHandle", "GetActionHandle", "GetInputSourceHandle", "UpdateActionState", "GetDigitalActionData", "GetAnalogActionData", "GetPoseActionDataRelativeToNow", "GetPoseActionDataForNextFrame", "GetSkeletalActionData", "GetBoneCount", "GetBoneHierarchy", "GetBoneName", "GetSkeletalReferenceTransforms", "GetSkeletalTrackingLevel", "GetSkeletalBoneData", "GetSkeletalSummaryData", "GetSkeletalBoneDataCompressed", "DecompressSkeletalBoneData", "TriggerHapticVibrationAction", "GetActionOrigins", "GetOriginLocalizedName", "GetOriginTrackedDeviceInfo", "ShowActionOrigins", "ShowBindingsForActionSet", "IsUsingLegacyInput");
	}
	public VR_IVRInput_FnTable(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends VR_IVRInput_FnTable implements Structure.ByReference {
		
	};
	public static class ByValue extends VR_IVRInput_FnTable implements Structure.ByValue {
		
	};
}
